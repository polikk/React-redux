{"version":3,"sources":["app/Navbar.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","features/posts/SinglePostPage.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","initialState","content","sub","Date","minutes","toISOString","reactions","thumbsUp","hooray","heart","rocket","eyes","postsSlice","createSlice","reducers","postAdded","reducer","action","push","payload","prepare","nanoid","reactionAdded","postId","reaction","existingPost","post","postUpdated","actions","reactionEmoji","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","key","type","onClick","PostsList","renderedPosts","posts","slice","sort","a","b","localeCompare","substring","AddPostForm","useState","setTitle","setContent","setUserId","canSave","Boolean","usersOptions","value","htmlFor","placeholder","onChange","e","target","disabled","EditPostForm","match","params","history","useHistory","SinglePostPage","console","log","App","seedDate","exact","path","render","Fragment","component","usersSlice","configureStore","postsReducer","usersReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","data","normalizedRequestAttrs","Error","create","get","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","notifications","Array","db","template","between","message","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.5d610378.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <section>\r\n        <h1>Redux  Example</h1>\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\">\r\n            <Link to=\"/\">Posts</Link>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useSelector((state) =>\r\n    state.users.find((user) => user.id === userId)\r\n  )\r\n\r\n  return <span>by {author ? author.name : 'Unknown author'}</span>\r\n}\r\n","import React from 'react'\r\nimport { parseISO, formatDistanceToNow } from 'date-fns'\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = ''\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp)\r\n    const timePeriod = formatDistanceToNow(date)\r\n    timeAgo = `${timePeriod} ago`\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  )\r\n}\r\n","import { createSlice, nanoid } from '@reduxjs/toolkit'\r\nimport { sub } from 'date-fns'\r\n\r\nconst initialState = [\r\n  {\r\n    id: '1',\r\n    title: 'First Post!',\r\n    content: 'Hello!',\r\n    user: '0',\r\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\r\n    reactions: {\r\n      thumbsUp: 0,\r\n      hooray: 0,\r\n      heart: 0,\r\n      rocket: 0,\r\n      eyes: 0,\r\n    },\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Second Post',\r\n    content: 'More text',\r\n    user: '2',\r\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\r\n    reactions: {\r\n      thumbsUp: 0,\r\n      hooray: 0,\r\n      heart: 0,\r\n      rocket: 0,\r\n      eyes: 0,\r\n    },\r\n  },\r\n]\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postAdded: {\r\n      reducer(state, action) {\r\n        state.push(action.payload)\r\n      },\r\n      prepare(title, content, userId) {\r\n        return {\r\n          payload: {\r\n            id: nanoid(),\r\n            date: new Date().toISOString(),\r\n            title,\r\n            content,\r\n            user: userId,\r\n            reactions: {\r\n              thumbsUp: 0,\r\n              hooray: 0,\r\n              heart: 0,\r\n              rocket: 0,\r\n              eyes: 0,\r\n            },\r\n          },\r\n        }\r\n      },\r\n    },\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload\r\n      const existingPost = state.find((post) => post.id === postId)\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++\r\n      }\r\n    },\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload\r\n      const existingPost = state.find((post) => post.id === id)\r\n      if (existingPost) {\r\n        existingPost.title = title\r\n        existingPost.content = content\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\r\n\r\nexport default postsSlice.reducer\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { reactionAdded } from './postsSlice'\r\n\r\nconst reactionEmoji = {\r\n  thumbsUp: '👍',\r\n  hooray: '🎉',\r\n  heart: '❤️',\r\n  rocket: '🚀',\r\n  eyes: '👀',\r\n}\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n    return (\r\n      <button\r\n        key={name}\r\n        type=\"button\"\r\n        className=\"muted-button reaction-button\"\r\n        onClick={() =>\r\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n        }\r\n      >\r\n        {emoji} {post.reactions[name]}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  return <div>{reactionButtons}</div>\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButtons'\r\n\r\nexport const PostsList = () => {\r\n  const posts = useSelector((state) => state.posts)\r\n\r\n  // Sort posts in reverse chronological order by datetime string\r\n  const orderedPosts = posts\r\n    .slice()\r\n    .sort((a, b) => b.date.localeCompare(a.date))\r\n\r\n  const renderedPosts = orderedPosts.map((post) => {\r\n    return (\r\n      <article className=\"post-excerpt\" key={post.id}>\r\n        <h3>{post.title}</h3>\r\n        <div>\r\n          <PostAuthor userId={post.user} />\r\n          <TimeAgo timestamp={post.date} />\r\n        </div>\r\n        <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n          View Post\r\n        </Link>\r\n      </article>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {renderedPosts}\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { postAdded } from './postsSlice'\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n  const [userId, setUserId] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n  const users = useSelector((state) => state.users)\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value)\r\n  const onContentChanged = (e) => setContent(e.target.value)\r\n  const onAuthorChanged = (e) => setUserId(e.target.value)\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postAdded(title, content, userId))\r\n      setTitle('')\r\n      setContent('')\r\n    }\r\n  }\r\n\r\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\r\n\r\n  const usersOptions = users.map((user) => (\r\n    <option key={user.id} value={user.id}>\r\n      {user.name}\r\n    </option>\r\n  ))\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {usersOptions}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { postUpdated } from './postsSlice'\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params\r\n\r\n  const post = useSelector((state) =>\r\n    state.posts.find((post) => post.id === postId)\r\n  )\r\n\r\n  const [title, setTitle] = useState(post.title)\r\n  const [content, setContent] = useState(post.content)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value)\r\n  const onContentChanged = (e) => setContent(e.target.value)\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postUpdated({ id: postId, title, content }))\r\n      history.push(`/posts/${postId}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n      </form>\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButtons'\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params\r\n    console.log(match)\r\n  const post = useSelector((state) =>\r\n    state.posts.find((post) => post.id === postId)\r\n  )\r\n\r\n  if (!post) {\r\n    return (\r\n      <section>\r\n        <h2>Post not found!</h2>\r\n      </section>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <article className=\"post\">\r\n        <h2>{post.title}</h2>\r\n        <div>\r\n          <PostAuthor userId={post.user} />\r\n          <TimeAgo timestamp={post.date} />\r\n        </div>\r\n        <p className=\"post-content\">{post.content}</p>\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/editPost/${post.id}`} className=\"button\">\r\n          Edit Post\r\n        </Link>\r\n      </article>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom'\r\n\r\nimport { Navbar } from './app/Navbar'\r\n\r\nimport { PostsList } from './features/posts/PostsList'\r\nimport { AddPostForm } from './features/posts/AddPostForm'\r\nimport { EditPostForm } from './features/posts/EditPostForm'\r\nimport { SinglePostPage } from './features/posts/SinglePostPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <React.Fragment>\r\n                <AddPostForm />\r\n                <PostsList />\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\r\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {\r\n  Server,\r\n  Model,\r\n  Factory,\r\n  belongsTo,\r\n  hasMany,\r\n  association,\r\n  RestSerializer,\r\n} from 'miragejs'\r\n\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nimport faker from 'faker'\r\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\r\nimport { parseISO } from 'date-fns'\r\nimport seedrandom from 'seedrandom'\r\n\r\nconst IdSerializer = RestSerializer.extend({\r\n  serializeIds: 'always',\r\n})\r\n\r\n// Set up a seeded random number generator, so that we get\r\n// a consistent set of users / entries each time the page loads.\r\n// This can be reset by deleting this localStorage value,\r\n// or turned off by setting `useSeededRNG` to false.\r\nlet useSeededRNG = true\r\n\r\nlet rng = seedrandom()\r\n\r\nif (useSeededRNG) {\r\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\r\n  let seedDate\r\n\r\n  if (randomSeedString) {\r\n    seedDate = new Date(randomSeedString)\r\n  } else {\r\n    seedDate = new Date()\r\n    randomSeedString = seedDate.toISOString()\r\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\r\n  }\r\n\r\n  rng = seedrandom(randomSeedString)\r\n  setRandom(rng)\r\n  faker.seed(seedDate.getTime())\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(rng() * (max - min + 1)) + min\r\n}\r\n\r\nconst randomFromArray = (array) => {\r\n  const index = getRandomInt(0, array.length - 1)\r\n  return array[index]\r\n}\r\n\r\nconst notificationTemplates = [\r\n  'poked you',\r\n  'says hi!',\r\n  `is glad we're friends`,\r\n  'sent you a gift',\r\n]\r\n\r\nnew Server({\r\n  routes() {\r\n    this.namespace = 'fakeApi'\r\n    //this.timing = 2000\r\n\r\n    this.resource('users')\r\n    this.resource('posts')\r\n    this.resource('comments')\r\n\r\n    const server = this\r\n\r\n    this.post('/posts', function (schema, req) {\r\n      const data = this.normalizedRequestAttrs()\r\n      data.date = new Date().toISOString()\r\n      // Work around some odd behavior by Mirage that's causing an extra\r\n      // user entry to be created unexpectedly when we only supply a userId.\r\n      // It really want an entire Model passed in as data.user for some reason.\r\n      const user = schema.users.find(data.userId)\r\n      data.user = user\r\n\r\n      if (data.content === 'error') {\r\n        throw new Error('Could not save the post!')\r\n      }\r\n\r\n      const result = server.create('post', data)\r\n      return result\r\n    })\r\n\r\n    this.get('/posts/:postId/comments', (schema, req) => {\r\n      const post = schema.posts.find(req.params.postId)\r\n      return post.comments\r\n    })\r\n\r\n    this.get('/notifications', (schema, req) => {\r\n      const numNotifications = getRandomInt(1, 5)\r\n\r\n      let pastDate\r\n\r\n      const now = new Date()\r\n\r\n      if (req.queryParams.since) {\r\n        pastDate = parseISO(req.queryParams.since)\r\n      } else {\r\n        pastDate = new Date(now.valueOf())\r\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\r\n      }\r\n\r\n      // Create N random notifications. We won't bother saving these\r\n      // in the DB - just generate a new batch and return them.\r\n      const notifications = [...Array(numNotifications)].map(() => {\r\n        const user = randomFromArray(schema.db.users)\r\n        const template = randomFromArray(notificationTemplates)\r\n        return {\r\n          id: nanoid(),\r\n          date: faker.date.between(pastDate, now).toISOString(),\r\n          message: template,\r\n          user: user.id,\r\n          read: false,\r\n          isNew: true,\r\n        }\r\n      })\r\n\r\n      return { notifications }\r\n    })\r\n  },\r\n  models: {\r\n    user: Model.extend({\r\n      posts: hasMany(),\r\n    }),\r\n    post: Model.extend({\r\n      user: belongsTo(),\r\n      comments: hasMany(),\r\n    }),\r\n    comment: Model.extend({\r\n      post: belongsTo(),\r\n    }),\r\n    notification: Model.extend({}),\r\n  },\r\n  factories: {\r\n    user: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      firstName() {\r\n        return faker.name.firstName()\r\n      },\r\n      lastName() {\r\n        return faker.name.lastName()\r\n      },\r\n      name() {\r\n        return faker.name.findName(this.firstName, this.lastName)\r\n      },\r\n      username() {\r\n        return faker.internet.userName(this.firstName, this.lastName)\r\n      },\r\n\r\n      afterCreate(user, server) {\r\n        server.createList('post', 3, { user })\r\n      },\r\n    }),\r\n    post: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      title() {\r\n        return sentence()\r\n      },\r\n      date() {\r\n        return faker.date.recent(7)\r\n      },\r\n      content() {\r\n        return article(1)\r\n      },\r\n      reactions() {\r\n        return {\r\n          thumbsUp: 0,\r\n          hooray: 0,\r\n          heart: 0,\r\n          rocket: 0,\r\n          eyes: 0,\r\n        }\r\n      },\r\n      afterCreate(post, server) {\r\n        //server.createList('comment', 3, { post })\r\n      },\r\n\r\n      user: association(),\r\n    }),\r\n    comment: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      date() {\r\n        return faker.date.past(2)\r\n      },\r\n      text() {\r\n        return paragraph()\r\n      },\r\n      post: association(),\r\n    }),\r\n  },\r\n  serializers: {\r\n    user: IdSerializer,\r\n    post: IdSerializer,\r\n    comment: IdSerializer,\r\n  },\r\n  seeds(server) {\r\n    server.createList('user', 3)\r\n  },\r\n})\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = [\r\n  { id: '0', name: 'Tianna Jenkins' },\r\n  { id: '1', name: 'Kevin Grant' },\r\n  { id: '2', name: 'Madison Price' },\r\n]\r\n\r\nconst usersSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {},\r\n})\r\n\r\nexport default usersSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport usersReducer from '../features/users/usersSlice'\r\nimport postsReducer from '../features/posts/postsSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n    users: usersReducer\r\n  }\r\n})","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport './api/server'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}